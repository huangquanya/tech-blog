(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{562:function(_,e,t){"use strict";t.r(e);var v=t(17),r=Object(v.a)({},(function(){var _=this,e=_.$createElement,t=_._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"缓存相关机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存相关机制"}},[_._v("#")]),_._v(" 缓存相关机制")]),_._v(" "),t("h2",{attrs:{id:"_1、-dns缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、-dns缓存"}},[_._v("#")]),_._v(" 1、 DNS缓存")]),_._v(" "),t("h3",{attrs:{id:"什么是dns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是dns"}},[_._v("#")]),_._v(" 什么是DNS")]),_._v(" "),t("p",[_._v("全称 Domain Name System，域名系统")]),_._v(" "),t("blockquote",[t("p",[_._v("是"),t("a",{attrs:{href:"https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91",target:"_blank",rel:"noopener noreferrer"}},[_._v("互联网"),t("OutboundLink")],1),_._v("的一项服务。它作为将"),t("a",{attrs:{href:"https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D",target:"_blank",rel:"noopener noreferrer"}},[_._v("域名"),t("OutboundLink")],1),_._v("和"),t("a",{attrs:{href:"https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80",target:"_blank",rel:"noopener noreferrer"}},[_._v("IP地址"),t("OutboundLink")],1),_._v("相互"),t("a",{attrs:{href:"https://baike.baidu.com/item/%E6%98%A0%E5%B0%84",target:"_blank",rel:"noopener noreferrer"}},[_._v("映射"),t("OutboundLink")],1),_._v("的一个"),t("a",{attrs:{href:"https://baike.baidu.com/item/%E5%88%86%E5%B8%83%E5%BC%8F%E6%95%B0%E6%8D%AE%E5%BA%93",target:"_blank",rel:"noopener noreferrer"}},[_._v("分布式数据库"),t("OutboundLink")],1),_._v("，能够使人更方便地访问"),t("a",{attrs:{href:"https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91",target:"_blank",rel:"noopener noreferrer"}},[_._v("互联网"),t("OutboundLink")],1),_._v("。DNS使用"),t("a",{attrs:{href:"https://baike.baidu.com/item/UDP",target:"_blank",rel:"noopener noreferrer"}},[_._v("UDP"),t("OutboundLink")],1),t("a",{attrs:{href:"https://baike.baidu.com/item/%E7%AB%AF%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"}},[_._v("端口"),t("OutboundLink")],1),_._v("53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。")])]),_._v(" "),t("h3",{attrs:{id:"dns解析过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns解析过程"}},[_._v("#")]),_._v(" DNS解析过程")]),_._v(" "),t("p",[_._v("通过域名最终得到其对应的IP的过程，就叫做域名解析")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("www.baidu.com -DNS解析-> 11.22.33.44（IP地址）\n")])])]),t("h3",{attrs:{id:"dns缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dns缓存"}},[_._v("#")]),_._v(" DNS缓存")]),_._v(" "),t("p",[_._v("用户在地址栏输入域名后，dns解析过程中可能取缓存的地方如下")]),_._v(" "),t("ol",[t("li",[_._v("浏览器检查自身缓存，是否有该域名对应的ip地址，没有则进行下一步")]),_._v(" "),t("li",[_._v("浏览器检查操作系统hosts文件中有没有对应的的结果，没有进行下一步")]),_._v(" "),t("li",[_._v("请求本地域名服务器（LDNS）来解析这个域名，一般都会缓存域名解析结果，80%的域名解析到此结束。没有则下一步")]),_._v(" "),t("li",[_._v("跳到Root Server根域名服务器请求解析，根域名服务器查询到该域名对应的顶级域名服务器，告诉LDNS该顶级域名服务器（TLD）下的权威DNS服务器的IP地址列表（多个服务器），LDNS向其中一个权威服务器查询该域名，得到IP地址，LDNS将该IP缓存，再将IP返回给主机")])]),_._v(" "),t("p",[_._v("其中：")]),_._v(" "),t("ol",[t("li",[_._v("本机向本地DNS服务器(LDNS)请求，最后收到是递归查询")]),_._v(" "),t("li",[_._v("本地DNS服务器(LDNS)向根服务器，顶级域名服务器，权威DNS服务器查询是迭代操作")])]),_._v(" "),t("h2",{attrs:{id:"_2、cdn缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、cdn缓存"}},[_._v("#")]),_._v(" 2、CDN缓存")]),_._v(" "),t("h3",{attrs:{id:"cdn原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cdn原理"}},[_._v("#")]),_._v(" CDN原理")]),_._v(" "),t("p",[_._v("CDN(Content Dilivery Network，内容分发网络)，将原站内容分发到全国所有的节点，让用户请求时，访问离自己最近的节点，从而缩短用户请求资源的延迟，提高用户访问网站的响应速度与网站的可用性的技术。可以有效解决网络带宽小、用户访问量大、网点分布不匀的问题")]),_._v(" "),t("h3",{attrs:{id:"cdn的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cdn的优点"}},[_._v("#")]),_._v(" CDN的优点")]),_._v(" "),t("ul",[t("li",[_._v("加速网站的访问")]),_._v(" "),t("li",[_._v("实现跨运营商，跨地域的全网覆盖")]),_._v(" "),t("li",[_._v("CDN的负载均衡和分布式存储，加强了网站的 可靠性")]),_._v(" "),t("li",[_._v("节约成本，CDN厂商提供一站式服务")])]),_._v(" "),t("h3",{attrs:{id:"cdn具体生效流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cdn具体生效流程"}},[_._v("#")]),_._v(" CDN具体生效流程")]),_._v(" "),t("ol",[t("li",[_._v("当用户点击网站页面上的内容URL，经过本地DNS服务器解析，最终将域名的解析权交给 "),t("a",{attrs:{href:"https://baike.baidu.com/item/CNAME/9845877?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[_._v("CNAME"),t("OutboundLink")],1),_._v(" 指向的 CDN 专用 DNS 服务器。")]),_._v(" "),t("li",[_._v("CDN 的 DNS 服务器将 CDN 的全局负载均衡设备 IP 地址返回用户。")]),_._v(" "),t("li",[_._v("用户向 CDN 的全局负载均衡设备发起内容 URL 访问请求。")]),_._v(" "),t("li",[_._v("CDN 全局负载均衡设备根据用户 IP 地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求。")]),_._v(" "),t("li",[_._v("基于以下这些条件的综合分析之后，区域负载均衡设备会向全局负载均衡设备返回一台缓存服务器的IP地址：\n"),t("ol",[t("li",[_._v("根据用户 IP 地址，判断哪一台服务器距用户最近；")]),_._v(" "),t("li",[_._v("根据用户所请求的 URL 中携带的内容名称，判断哪一台服务器上有用户所需内容；")]),_._v(" "),t("li",[_._v("查询各个服务器当前的负载情况，判断哪一台服务器尚有服务能力。")])])]),_._v(" "),t("li",[_._v("全局负载均衡设备把缓存服务器的 IP 地址返回给用户。")]),_._v(" "),t("li",[_._v("用户向缓存服务器发起请求，缓存服务器响应用户请求，将用户所需内容传送到用户终端。如果这台缓存服务器上并没有用户想要的内容，而区域均衡设备依然将它分配给了用户，那么这台服务器就要向它的上一级缓存服务器请求内容，直至追溯到网站的源服务器将内容拉到本地。")])]),_._v(" "),t("p",[_._v("CDN 专用 DNS 服务器根据用户 IP 地址，将域名解析成相应节点的缓存服务器IP地址，实现用户就近访问。使用 CDN 服务的网站，只需将其域名解析权交给 CDN 的全局负载均衡（GSLB）设备，将需要分发的内容注入 CDN，就可以实现内容加速了。")]),_._v(" "),t("h2",{attrs:{id:"_3、前端缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、前端缓存"}},[_._v("#")]),_._v(" 3、前端缓存")]),_._v(" "),t("p",[_._v("前端缓存主要是分为浏览器缓存和HTTP缓存。浏览器缓存主要是由前端在前端代码中设置；而HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置。")]),_._v(" "),t("h3",{attrs:{id:"缓存过程分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存过程分析"}},[_._v("#")]),_._v(" 缓存过程分析")]),_._v(" "),t("p",[_._v("浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/13277068-07156359f5cf8dea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/761/format/webp",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"http缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http缓存"}},[_._v("#")]),_._v(" HTTP缓存")]),_._v(" "),t("p",[_._v("HTTP缓存中存在强缓存和协商缓存两个过程")]),_._v(" "),t("p",[t("strong",[_._v("强缓存")])]),_._v(" "),t("p",[_._v("向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程，主要有以下三种情况")]),_._v(" "),t("ol",[t("li",[_._v("不存在该缓存结果和缓存标识，强缓存失效，直接向服务器发起请求")]),_._v(" "),t("li",[_._v("存在该缓存结果和缓存标识，且结果未失效，强制缓存生效，直接返回结果")]),_._v(" "),t("li",[_._v("存在该缓存结果和缓存标识，但结果已失效，强制缓存失效，使用协商缓存")])]),_._v(" "),t("p",[_._v("控制字段："),t("em",[_._v("Expires")]),_._v("和"),t("em",[_._v("Cache-Control（优先级更高）")])]),_._v(" "),t("p",[_._v("Expire：")]),_._v(" "),t("ul",[t("li",[_._v("HTTP/1.0控制网页缓存的字段，值为该结果失效的时间，再次请求时，若客户端时间小于该值，则使用缓存结果")]),_._v(" "),t("li",[_._v("HTTP/1.1中被Cache-Control取代，若服务端的时间值或客户端的时间发生误差，强缓存就直接失效了")])]),_._v(" "),t("p",[_._v("Cache-Control")]),_._v(" "),t("ul",[t("li",[_._v("取值：\n"),t("ul",[t("li",[_._v("public：所有内容都将被缓存（客户端和代理服务器都可缓存）")]),_._v(" "),t("li",[_._v("private：所有内容将被缓存（只有客户端可缓存，默认值）")]),_._v(" "),t("li",[_._v("no-cache：客户端缓存内容，但是使用时需要经过协商缓存来验证决定")]),_._v(" "),t("li",[_._v("no-store：所有内容都不被缓存，不使用强缓存也不使用协商缓存")]),_._v(" "),t("li",[_._v("max-age=xxx（缓存内容将在xxx秒后失效）")]),_._v(" "),t("li",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"}},[_._v("其他参数"),t("OutboundLink")],1)])])])]),_._v(" "),t("p",[_._v("Pragma： 兼容http1.0 、http1.1， 只有no-cache一个值，优先级最高")]),_._v(" "),t("p",[t("strong",[_._v("协商缓存")])]),_._v(" "),t("p",[_._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程，主要有以下两种情况")]),_._v(" "),t("ol",[t("li",[_._v("协商缓存生效，返回304")]),_._v(" "),t("li",[_._v("协商缓存失效，返回200和请求结果")])]),_._v(" "),t("p",[_._v("控制字段："),t("em",[_._v("Last-Modified/If-Modified-Since")]),_._v("和 "),t("em",[_._v("Etag/If-None-Match (优先级更高)")])]),_._v(" "),t("p",[t("em",[_._v("Last-Modified")]),_._v("： 服务器响应请求时，返回的该资源在服务器最后被修改的时间")]),_._v(" "),t("p",[t("em",[_._v("If-Modified-Since")]),_._v("：是客户端再次发起该请求时，携带上次请求返回的Last-Modified值，通过此字段值告诉服务器该资源上次请求返回的最后被修改时间")]),_._v(" "),t("p",[_._v("服务器发现请求头含有if-Modified-Since字段，会根据该字段值与该资源在服务器的最后被修改时间做对比，若服务器资源最后修改时间大于该值，则重新返回资源，200；否则返回304，继续使用缓存")]),_._v(" "),t("p",[t("em",[_._v("Etag")]),_._v("：是服务器响应请求时，返回当前资源文件的一个唯一标识（服务器生成）")]),_._v(" "),t("p",[t("em",[_._v("If-None-Match")]),_._v("：是客户端再次发起请求时，携带上次请求返回的唯一标识Etag值。服务器收到请求后，发现该请求头中含有该字段，比较服务器中的Etag值，一致则返回304，不一致返回200和新资源")]),_._v(" "),t("p",[t("strong",[_._v("总结")]),_._v("：强缓存优先于协商缓存进行，若强缓存(Expires和Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回304，继续使用缓存"),t("img",{attrs:{src:"http://assets.processon.com/chart_image/624f92a01efad40789171088.png",alt:"流程图"}})]),_._v(" "),t("p",[t("strong",[_._v("缓存内容存放位置")])]),_._v(" "),t("p",[_._v("内存缓存(from memory cache)：内存缓存具有两个特点，分别是速度快和时间限制。（js和图片等文件）")]),_._v(" "),t("p",[_._v("硬盘缓存(from disk cache)：硬盘缓存则是直接将缓存写入硬盘文件中，读取缓存需要对该缓存存放的硬盘文件进行I/O操作，然后重新解析该缓存内容，读取复杂，速度比内存缓存慢。（css文件）")]),_._v(" "),t("h3",{attrs:{id:"浏览器缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[_._v("#")]),_._v(" 浏览器缓存")]),_._v(" "),t("p",[t("strong",[_._v("本地存储小容量")]),_._v("：")]),_._v(" "),t("ol",[t("li",[_._v("Cookie(4kb)：主要用于用户信息的存储，Cookie的内容可以自动在请求时携带给服务器\n"),t("ul",[t("li",[_._v("存活时间：Expires(存活到的指定时间UTC格式) 和 Max-Age(规定从现在开始存在的秒数，优先级更高)；都不设置则关闭浏览器就清除这个cookie")]),_._v(" "),t("li",[_._v("Secure：在HTTPS协议下才能将Cookie发送到服务器，HTTPS协议时自动打开")]),_._v(" "),t("li",[_._v("HttpOnly：指定Cookie无法通过js拿到，只有发出HTTP请求时才会带上")]),_._v(" "),t("li",[_._v("请求携带：")])])])]),_._v(" "),t("p",[_._v("LocalStorage(5M)：一直保存在浏览器内，直到用户清理浏览器缓存数据")]),_._v(" "),t("p",[_._v("SessionStorage(5M)：其他属性同LocalStorage，生命周期同标签页的生命周期，当标签页被关闭时会被清除")]),_._v(" "),t("p",[t("strong",[_._v("本地存储大容量")]),_._v("：")]),_._v(" "),t("p",[_._v("IndexDB(50M)：非关系型数据库")]),_._v(" "),t("p",[t("strong",[_._v("特点")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v("键值对存储：内部用对象仓库存放数据，所有类型的数据都可以直接存入")]),_._v(" "),t("li",[_._v("异步：indexDB操作时用户依然可能进行其他操作，异步设计是为了防止大量数据的读写，拖慢网页")]),_._v(" "),t("li",[_._v("支持事务：修改整个标的数据或者修改一半报错了，这时会全部恢复到没修改之前的状态")]),_._v(" "),t("li",[_._v("同源限制：每一个数据库应创建它对应的域名，网页只能访问自身域名下的数据库")]),_._v(" "),t("li",[_._v("存储空间大：不少于250MB")]),_._v(" "),t("li",[_._v("支持二进制存储：ArrayBuffer和Blob")])]),_._v(" "),t("p",[t("strong",[_._v("详细参考文章")]),_._v("：")]),_._v(" "),t("ol",[t("li",[t("a",{attrs:{href:"https://juejin.cn/post/7025911892056997924#comment",target:"_blank",rel:"noopener noreferrer"}},[_._v("前端数据存储之indexDB"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/qq_41579192/article/details/121605983",target:"_blank",rel:"noopener noreferrer"}},[_._v("indexDB入门到精通，indexdb增删查改，封装indexdb类库，indexdb基本使用"),t("OutboundLink")],1)])]),_._v(" "),t("h3",{attrs:{id:"service-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[_._v("#")]),_._v(" Service Worker")]),_._v(" "),t("p",[t("strong",[_._v("特点")]),_._v("：")]),_._v(" "),t("ul",[t("li",[_._v("运行于js主线程之外的独立线程，无法访问DOM")]),_._v(" "),t("li",[_._v("可以拦截用户发出的请求，修改请求或者直接向用户返回缓存")]),_._v(" "),t("li",[_._v("可以访问Cache和IndexedDB")]),_._v(" "),t("li",[_._v("必须使用https协议")])]),_._v(" "),t("p",[t("strong",[_._v("生命周期")]),_._v("：")]),_._v(" "),t("ol",[t("li",[_._v("注册：")]),_._v(" "),t("li",[_._v("安装")]),_._v(" "),t("li",[_._v("等待")]),_._v(" "),t("li",[_._v("激活")]),_._v(" "),t("li",[_._v("已激活")]),_._v(" "),t("li",[_._v("注销")]),_._v(" "),t("li",[_._v("废弃")])])])}),[],!1,null,null,null);e.default=r.exports}}]);